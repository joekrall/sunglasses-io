swagger: '2.0'
info:
  title: Sunglasses API
  description: An API to support the Sunglasses platform
  version: 1.0.0
host: api.sunglasses.io
schemes:
  - https
basePath: /v1
produces:
  - application/json
paths:
  /brands:
    get:
      tags:
        - Brands
      summary: Search all brands by query string, return all if no query
      description: ""
      parameters:
        - name: query
          in: query
          description: Search query string
          required: false
          type: string
      responses:
        '200':
          description: An array of brands
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        '404':
          description: No brands found in database according to specifications
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /brands/{id}/products:
    get:
      tags: 
        - Brands
      summary: Get all products belonging to a brand by categoryId
      description: ""
      parameters:
        - name: id
          in: path
          description: The categoryId of the products to send back
          required: true
          type: string
      responses:
        '200':
          description: An array of products with the same brand id
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        '404':
          description: No brand id matches the id in path
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /products:
    get:
      tags: 
        - Products
      summary: Get all products specified by search query
      description: ""
      parameters:
        - name: name
          in: query
          description: Compare search term to product name
          required: true
          type: string
        - name: description
          in: query
          description: Compare search term to product description
          required: true
          type: string
      responses:
        '200':
          description: An array of products matching search criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        '404':
          description: No product matches the query string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      parameters:
        - name: login 
          in: body
          description: The user name for login
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: successful operation returns an access token that does not expire
          schema:
            type: string
        '401':
          description: Invalid username/password supplied
        '400':
          description: Incorrect formatting
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/cart:
    get:
      tags:
        - User
      summary: Returns all items in the cart
      parameters:
        - name: token
          in: body
          description: access token for user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns all items in the cart
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Add an item to the cart
      tags:
        - User
      parameters:
        - name: CartOps
          in: body
          description: access token for user
          required: true
          schema:
            $ref: '#/definitions/CartOps'
      responses:
        '200':
          description: Successfully adds an item to the user's cart array
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/cart/{productId}:
    delete:
      summary: Delete an item to the cart
      tags:
        - User
      parameters:
        - name: productId
          in: path
          description: id of product that needs to be deleted
          required: true
          type: integer
        - name: CartOps
          in: body
          description: access token for user
          required: true
          schema:
            $ref: '#/definitions/CartOps'
      responses:
        '200':
          description: Successfully deletes the item from the user's cart array
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Change an item's quantity in the cart
      tags:
        - User
      parameters:
        - name: productId
          in: path
          description: id of product that needs to be deleted
          required: true
          type: integer
        - name: CartOps
          in: body
          description: access token for user
          required: true
          schema:
            $ref: '#/definitions/CartOps'
      responses:
        '200':
          description: Successfully changes the quanity of the item int the user's cart array
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  CartOps:
    type: object
    properties:
      token:
        type: string
        description: the access token granted for the user's cart
      productId:
        type: string
        description: the product the user is adding to cart
      quantity:
        type: integer
        description: the desired quantity of the item in cart
  Login: 
    type: object
    properties:
      username:
        type: string
        description: The username for login
      password: 
          type: string
          description: The password for login
  Product:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for a product.
      categoryId:
        type: string
        description: The id of the category this product belongs to.
      name:
        type: string
        description: The name of the product.
      description:
        type: string
        description: Description of product.
      price:
        type: number
        format: double
        description: The price of a given product
      imageURL:
        type: string
        description: The URL for the image representing the product
  Brand:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for a brand.
      name:
        type: string
        description: The name of the brand of sunglasses.
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string